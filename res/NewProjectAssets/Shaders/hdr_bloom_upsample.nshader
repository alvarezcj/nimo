@VERTEX
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 uv;

out vec2 TexCoords;

void main()
{
    TexCoords = uv;
    gl_Position = vec4(position, 1.0);
}
@VERTEXEND@FRAGMENT
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D textureBig;
uniform sampler2D textureSmall;
uniform vec2 textureResolution; //small

void main()
{
    float Pi = 6.28318530718; // Pi*2
    
    // GAUSSIAN BLUR SETTINGS {{{
    float Directions = 26.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
    float Quality = 9.0; // BLUR QUALITY (Default 4.0 - More is better but slower)
    float Size = 5.0; // BLUR SIZE (Radius)
    // GAUSSIAN BLUR SETTINGS }}}
    vec2 Radius = Size/textureResolution.xy;
    vec4 Color = texture(textureSmall, TexCoords);
    // Blur calculations
    for( float d=0.0; d<Pi; d+=Pi/Directions)
    {
		for(float i=1.0/Quality; i<=1.001; i+=1.0/Quality)
        {
			Color += texture( textureSmall, TexCoords+vec2(cos(d),sin(d))*Radius*i);		
        }
    }
    
    // Output to screen
    Color /= Quality * Directions +1.0;
    
    vec4 hdrColor = texture(textureBig, TexCoords) + Color * 0.66;

    FragColor = vec4(hdrColor.rgb, 1.0);
}
@FRAGMENTEND