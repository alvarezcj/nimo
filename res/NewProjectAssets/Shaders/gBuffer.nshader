@VERTEX
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out vec3 FragPos;
out vec2 TexCoords;
out vec3 Normal;
out mat3 TBN;

uniform mat4 transform;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    vec4 worldPos = transform * vec4(aPos, 1.0);
    FragPos = worldPos.xyz; 
    TexCoords = aTexCoords;
    
    vec3 T = normalize(vec3(transform * vec4(aTangent,0.0)));
    vec3 B = normalize(vec3(transform * vec4(aBitangent,0.0)));
    vec3 N = normalize(vec3(transform * vec4(aNormal,0.0)));
    TBN = (mat3 (T,B,N));
    mat3 normalMatrix = transpose(inverse(mat3(transform)));
    Normal = normalMatrix * aNormal;

    gl_Position = projection * view * worldPos;
}
@VERTEXEND@FRAGMENT
#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec3 gAlbedo;
layout (location = 3) out vec3 gARM;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in mat3 TBN;

uniform vec3 viewPos;
uniform mat4 transform;
uniform mat4 view;

uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D armMap;

void main()
{
	vec2 texCoord = TexCoords;
	vec3 viewDir = normalize( (transpose(TBN) *viewPos - transpose(TBN) *FragPos)); // tangent space view dir

    gPosition = FragPos;

    gNormal.rgb = texture(normalMap, texCoord).rgb;
    gNormal = gNormal * 2.0 -1.0;
    gNormal.rgb = TBN*gNormal.rgb;
	gNormal.rgb = normalize( mat3(view * transform)*gNormal.rgb );

    gAlbedo = texture(albedoMap, texCoord).rgb;
    
    gARM = texture(armMap, texCoord).rgb;
}
@FRAGMENTEND