@VERTEX
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out vec2 TexCoords;

void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}
@VERTEXEND@FRAGMENT
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;
uniform sampler2D gARM;

struct Light {
    vec3 Position;
    vec3 Color;
	float Intensity;
    
    float Linear;
    float Quadratic;
    float Radius;

    bool Active;
};
const float PI = 3.14159265359;
const int NR_LIGHTS = 32;
uniform Light lights[NR_LIGHTS];
uniform vec3 viewPos;
uniform int currentLights;
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
// ----------------------------------------------------------------------------

void main()
{             
    vec4 albedoSample = texture(gAlbedoSpec, TexCoords);
    if(albedoSample.a == 0.0) 
        discard;
    vec3 WorldPos = texture(gPosition, TexCoords).rgb;
    vec3 albedo     = pow(albedoSample.rgb, vec3(2.2));
    float metallic  = texture(gARM, TexCoords).b;
    float roughness = texture(gARM, TexCoords).g;
    float ao        = texture(gARM, TexCoords).r;
    vec3 N = normalize(texture(gNormal, TexCoords).xyz);
    vec3 V = normalize(viewPos - texture(gPosition, TexCoords).rgb);
    // Lerp between Dia-electric = 0.04f to Metal = albedo
    vec3 F0 = mix(vec3(0.04), albedo, metallic);
    // reflectance equation
    vec3 Lo = vec3(0.0);
    for(int i = 0; i < NR_LIGHTS; ++i)
    {
        if(!lights[i].Active) continue;
        // calculate distance between light source and current fragment
        float distance = length(lights[i].Position - WorldPos);
        if(distance < lights[i].Radius)
        {
        	// calculate per-light radiance
        	vec3 L = normalize(lights[i].Position - WorldPos);
        	vec3 H = normalize(V + L);
			float attenuation = lights[i].Intensity / (1.0 + lights[i].Linear * distance + lights[i].Quadratic * distance * distance);
        	//float attenuation = 1.0 / (distance * distance);
        	vec3 radiance = lights[i].Color * attenuation;

        	// Cook-Torrance BRDF
        	float NDF = DistributionGGX(N, H, roughness);   
        	float G   = GeometrySmith(N, V, L, roughness);      
        	vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);
           
        	vec3 numerator    = NDF * G * F; 
        	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
        	vec3 specular = numerator / denominator;
        
        	// kS is equal to Fresnel
        	vec3 kS = F;
        	// for energy conservation, the diffuse and specular light can't
        	// be above 1.0 (unless the surface emits light); to preserve this
        	// relationship the diffuse component (kD) should equal 1.0 - kS.
        	vec3 kD = vec3(1.0) - kS;
        	// multiply kD by the inverse metalness such that only non-metals 
        	// have diffuse lighting, or a linear blend if partly metal (pure metals
        	// have no diffuse light).
        	kD *= 1.0 - metallic;	  

        	// scale light by NdotL
        	float NdotL = max(dot(N, L), 0.0);        

        	// add to outgoing radiance Lo
        	Lo += (kD * albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
        }
    }
    
    // ambient lighting (note that the next IBL tutorial will replace 
    // this ambient lighting with environment lighting).
    vec3 ambient = vec3(0.03) * albedo * ao;
    
    vec3 color = ambient + Lo;
    FragColor = vec4(color, 1.0);
}
@FRAGMENTEND