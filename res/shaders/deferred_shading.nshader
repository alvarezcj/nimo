@VERTEX
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out vec2 TexCoords;

void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}
@VERTEXEND@FRAGMENT
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;

struct Light {
    vec3 Position;
    vec3 Color;
	float Intensity;
    
    float Linear;
    float Quadratic;
    float Radius;

    bool Active;
};
const int NR_LIGHTS = 32;
uniform Light lights[NR_LIGHTS];
uniform vec3 viewPos;
uniform int currentLights;

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{
    float height = texture(gNormal, TexCoords).a;
    return texCoords - viewDir.xy * (height * .1);
}
void main()
{             
    // then calculate lighting as usual
    // retrieve data from gbuffer
    vec3 FragPos = texture(gPosition, TexCoords).rgb;
    vec3 viewDir  = normalize(viewPos - FragPos);
	vec2 newTexCoords = TexCoords;
    //if(newTexCoords.x > 1.0 || newTexCoords.y > 1.0 || newTexCoords.x < 0.0 || newTexCoords.y < 0.0)
       // discard;
    vec3 Normal = texture(gNormal, newTexCoords).rgb;
    vec3 Diffuse = texture(gAlbedoSpec, newTexCoords).rgb;
    float Specular = texture(gAlbedoSpec, TexCoords).a;

    vec3 lighting  = Diffuse * 0.1; // hard-coded ambient component
    
    for(int i = 0; i < NR_LIGHTS; ++i)
    {
        if(!lights[i].Active) continue;
        // calculate distance between light source and current fragment
        float distance = length(lights[i].Position - FragPos);
        if(distance < lights[i].Radius)
        {
            // diffuse
            vec3 lightDir = normalize(lights[i].Position - FragPos);
            vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * lights[i].Color;
            // specular
            vec3 halfwayDir = normalize(lightDir + viewDir);  
            float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);
            vec3 specular = lights[i].Color * spec * Specular;
            // attenuation
            float attenuation = lights[i].Intensity / (1.0 + lights[i].Linear * distance + lights[i].Quadratic * distance * distance);
            diffuse *= attenuation;
            specular *= attenuation;
            lighting += diffuse + specular;
        }
    }    
    FragColor = vec4(lighting, 1.0);
    //FragColor = vec4(texture(gNormal, TexCoords).a, newTexCoords, 1.0);
}
@FRAGMENTEND